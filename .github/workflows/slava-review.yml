name: "Slava's DEMOLITION Code Review"

on:
  push:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  nuclear_review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get commit data
        id: commit_data
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const { data: commit } = await github.rest.repos.getCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.sha
              });

              core.setOutput('result', JSON.stringify({
                files: commit.files || [],
                author: commit.author?.login || context.actor,
                sha: context.sha
              }));
            } catch (error) {
              core.setOutput('result', JSON.stringify({
                files: [],
                author: context.actor,
                sha: context.sha
              }));
            }

      - name: Analyze changes
        id: pr_analysis
        run: |
          sudo apt-get install -y jq
          FILES_JSON='${{ steps.commit_data.outputs.result }}'
          TOTAL_CHANGES=$(echo "$FILES_JSON" | jq '[.files[].changes] | add // 0')
          AUTHOR=$(echo "$FILES_JSON" | jq -r '.author')
          COMMIT_SHA=$(echo "$FILES_JSON" | jq -r '.sha')
          IS_HUGE=$(($TOTAL_CHANGES > 300))

          echo "total_changes=$TOTAL_CHANGES" >> $GITHUB_OUTPUT
          echo "is_huge_change=$IS_HUGE" >> $GITHUB_OUTPUT
          echo "author=$AUTHOR" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

      - name: Generate comment
        id: generate_comment
        run: |
          REVIEWS=(
            "üíÄ –ö–æ–¥-—É–±–∏–π—Ü–∞! –¢—ã –≤–æ–æ–±—â–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª —ç—Ç–æ?"
            "ü§Æ –ú–µ–Ω—è —Ç–æ—à–Ω–∏—Ç –æ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ–¥–∞"
            "üî• –õ—É—á—à–µ —É–¥–∞–ª–∏ —ç—Ç–æ –Ω–∞—Ñ–∏–≥"
            "üëé –•—É–¥—à–∏–π –∫–æ–¥ –∑–∞ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é"
            "üí© –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∑–æ—Ä"
          )
          RANDOM_REVIEW=${REVIEWS[$((RANDOM % ${#REVIEWS[@]}))]}

          if [ ${{ steps.pr_analysis.outputs.total_changes }} -lt 50 ] && [ $((RANDOM % 10)) -eq 0 ]; then
            echo "comment=ü´§ –ù—É... –ª–∞–¥–Ω–æ. –ù–æ —è –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ–¥–æ–≤–æ–ª–µ–Ω." >> $GITHUB_OUTPUT
          else
            echo "comment=$RANDOM_REVIEW" >> $GITHUB_OUTPUT
          fi

      - name: Post commit comment
        uses: actions/github-script@v6
        env:
          COMMENT: ${{ steps.generate_comment.outputs.comment }}
          AUTHOR: ${{ steps.pr_analysis.outputs.author }}
          COMMIT_SHA: ${{ steps.pr_analysis.outputs.commit_sha }}
        with:
          script: |
            try {
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: process.env.COMMIT_SHA,
                body: `@${process.env.AUTHOR} ${process.env.COMMENT}`
              });
            } catch (error) {
              core.notice("Could not create commit comment: " + error.message);
              // –°–æ–∑–¥–∞–µ–º issue, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫–æ–º–º–∏—Ç—É
              try {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `Code review failed for commit ${process.env.COMMIT_SHA}`,
                  body: `@${process.env.AUTHOR} ${process.env.COMMENT}`
                });
              } catch (issueError) {
                core.error("Failed to create issue: " + issueError.message);
              }
            }
