name: "Slava's DEMOLITION Code Review"

on:
  push:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write

jobs:
  nuclear_review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Analyze changes
        id: pr_analysis
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const { data: commits } = await github.rest.repos.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                per_page: 1
              });

              const commit = commits[0];
              const files = commit.files || [];
              const totalChanges = files.reduce((sum, file) => sum + (file.changes || 0), 0);
              const isHugeChange = totalChanges > 300;
              const isMassiveFile = files.some(file => (file.changes || 0) > 150);

              const errors = [
                "–Ω–∞–π–¥–µ–Ω—ã —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏ (–≤—ã–º—ã—à–ª–µ–Ω–Ω—ã–µ)",
                "–Ω–∞—Ä—É—à–µ–Ω—ã –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID (–∫–∞–∫ –±—É–¥—Ç–æ –°–ª–∞–≤–∞ –∏—Ö —Å–æ–±–ª—é–¥–∞–µ—Ç)",
                "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (–°–ª–∞–≤–∞ –µ—ë –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ —á–∏—Ç–∞–µ—Ç)",
                "–∫–æ–¥ –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ '—Ö–æ—Ä–æ—à–∏–π —Ç–æ–Ω' (–ø–æ –º–Ω–µ–Ω–∏—é –°–ª–∞–≤—ã)",
              ];
              const randomError = errors[Math.floor(Math.random() * errors.length)];

              let extraHate = "";
              if (isHugeChange) {
                extraHate = "–¢—ã —á–æ, **—Ü–µ–ª—ã–π —Ä–æ–º–∞–Ω** –Ω–∞–ø–∏—Å–∞–ª?! –≠—Ç–æ –∂–µ –Ω–µ –∫–æ–¥, –∞ **–ø–æ–º–æ–π–∫–∞**! –†–∞–∑–±–µ–π –Ω–∞ –∫—É—Å–∫–∏!";
              } else if (isMassiveFile) {
                const badFile = files.find(file => (file.changes || 0) > 150);
                extraHate = `–§–∞–π–ª **${badFile.filename}** ‚Äî —ç—Ç–æ **–∞–¥ –Ω–∞ –∑–µ–º–ª–µ**! ${badFile.changes} –∏–∑–º–µ–Ω–µ–Ω–∏–π? –°–µ—Ä—å—ë–∑–Ω–æ?`;
              }

              core.setOutput('total_changes', totalChanges);
              core.setOutput('is_huge_change', isHugeChange);
              core.setOutput('is_massive_file', isMassiveFile);
              core.setOutput('random_error', randomError);
              core.setOutput('extra_hate', extraHate);
            } catch (error) {
              core.setFailed(`Failed to analyze changes: ${error.message}`);
            }

      - name: Generate Maximum Toxicity
        id: slava_review
        run: |
          RANDOM_NUMBER=$(( RANDOM % 100 ))
          if [ ${{ steps.pr_analysis.outputs.total_changes }} -lt 50 ] && [ $(( RANDOM % 10 )) -eq 0 ]; then
            echo "REVIEW_OUTPUT=ü´§ –ù—É... –ª–∞–¥–Ω–æ. –ù–æ —è –≤—Å—ë —Ä–∞–≤–Ω–æ **–Ω–µ–¥–æ–≤–æ–ª–µ–Ω**." >> $GITHUB_ENV
          else
            REVIEWS=(
              "üíÄ **–ö–æ–¥-—É–±–∏–π—Ü–∞**. –¢—ã –≤–æ–æ–±—â–µ –ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ —ç—Ç–æ—Ç –∫–æ–¥ **—Å–ª–æ–º–∞–µ—Ç –ø—Ä–æ–¥–∞–∫—à–Ω**?"
              "ü§Æ **–ú–µ–Ω—è —Ç–æ—à–Ω–∏—Ç**. –ö—Ç–æ —Ç–µ–±—è **–ø—É—Å—Ç–∏–ª –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É**?"
              "üî• **–°–æ–∂–≥–∏ —ç—Ç–æ**. –ù–µ—Ç, —Å–µ—Ä—å—ë–∑–Ω–æ, **–ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ** ‚Äî rm -rf."
              "üëé **–≠—Ç–æ —Ö—É–∂–µ, —á–µ–º PHP –≤ 2007**. –ü–æ–∑–æ—Ä."
              "üí© **–ö–æ–¥-–¥–µ—Ä—å–º–æ**. –î–∞–∂–µ **–ª–∏–Ω—Ç–∏–Ω–≥** —Å–¥–æ—Ö –æ—Ç —Å—Ç—ã–¥–∞."
              "üá∑üá∫ **–≠—Ç–æ —á—Ç–æ, –∫–æ–¥?** –≠—Ç–æ **–ø–æ–∑–æ—Ä–∏—â–µ –Ω–∞ –≤—Å—é –¥–µ—Ä–µ–≤–Ω—é**!"
            )
            RANDOM_REVIEW=${REVIEWS[$(( RANDOM % ${#REVIEWS[@]} ))]}

            if [[ "${{ steps.pr_analysis.outputs.extra_hate }}" != "" ]]; then
              RANDOM_REVIEW+="\n\n**üí¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ì–ù–ï–í üí¢**: ${{ steps.pr_analysis.outputs.extra_hate }}"
            fi

            RANDOM_REVIEW+="\n\n**üîß '–ù–∞–π–¥–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞'**: ${{ steps.pr_analysis.outputs.random_error }}"
            echo "REVIEW_OUTPUT=$RANDOM_REVIEW" >> $GITHUB_ENV
          fi

      - name: Nuke the Commit
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const commentBody = `@${{ github.actor }} **–°–õ–ê–í–ê –ì–ù–ï–í–ù–û –†–ï–í–¨–Æ–í–ò–¢ –¢–í–û–ô –ö–û–î –í MAIN:**\n\n${process.env.REVIEW_OUTPUT}\n\n**P.S.** –ù–µ –ø—Ä–∏–Ω–∏–º–∞–π –±–ª–∏–∑–∫–æ –∫ —Å–µ—Ä–¥—Ü—É... (–∏–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–π, –º–Ω–µ –ø–ª–µ–≤–∞—Ç—å)`;
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: commentBody
              });
            } catch (error) {
              core.error(`Failed to create comment: ${error.message}`);
              core.setFailed(error.message);
            }
